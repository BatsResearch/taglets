- pep8 warnings, cleaning code, add docstring
- add logo
- complete readme file
- complete a complete JPL process (3 base phases + 3 adapt phases)
- test on GPU google cloud
- logging
- installtion package
- pass checkpoints to save the best model for each checkpoint????
- CIFAR100 data
- (Elaheh)end model validation using soft entropy?
- (Elaheh)pretrain + fine tune (use scads)
- (Elaheh)in adapt phase, load pretrined model from which checkpoint? last?

- Endmodel, should it be trained on pre-trained on ImageNet? my concern is in adaptation phase where we are not loading
from pre-trained model

- "adaptation_can_use_pretrained_model:False" is hard-coded. We need to make it flexible. Maybe we need to add it to task.
e.g., task has 'phase' property ('adaptation' and 'base'). If phase is 'base', pretrained 'True', else 'False'


--tests:
-> active learning: check itâ€™s actually returning the least confident data points (check the confidence score)
-> controller: check at the end of each checkpoint, the number of labeled data points is increasing and the number of unlabeled data points is decreasing
-> controller: check at the end of each checkpoint, the sum of number of labeled and unlabeled datapoint == total number of train data
-> controller: check if we are learning on all labeled data after receiving new labeled data (Oll + New). At the end of each checkpoint, we are learning on more data
-> learning prcoess: check the loss of all taglets as well as end model, if the loss is decreasing; also check the gradients
-> learning process: observe the final accuracy on validation data; check how good it is

-> task: check the amount of labeled and unlabeled data of task object is updated at the end of each checkpoint

-> label model: final score is better than majority vote

-> taglet executer: at the end of each checkpoint, the number of unlabeld data for the taglet executer is decreasing.

-> end model: check the splits and combination of labeled and soft labels.

-> check pretrained = True/False based on the current phase.
-> check during adaptaiton, we are acutally loading from base model


#######(Elaheh) Final changes for evaluation:
- user Brown Team Secret Key
- full run for taglets, end model and label model (remove if bathc_index >=1 )
-controller: available_budget = available_budget // 10   # For testing
-controller: self.use_gpu = False

- task: base and adaptation address
 task.unlabeled_image_path = "./sql_data/MNIST/train"
 task.evaluation_image_path = "./sql_data/MNIST/test"  # Should be updated later

#######(Elaheh) Questions to JPL:
- number of check poits for each phase?
- why two phases? we could just simply have only one phase!
